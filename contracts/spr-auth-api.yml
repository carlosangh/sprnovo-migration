openapi: 3.0.3
info:
  title: SPR Authentication API
  description: |
    API de autentica√ß√£o do Sistema Preditivo Royal (SPR).
    
    Esta API fornece servi√ßos de autentica√ß√£o para:
    - Login de usu√°rios com email/username
    - Gera√ß√£o e valida√ß√£o de tokens JWT
    - Gerenciamento de sess√µes
    - Endpoints protegidos
    
    **Vers√£o:** Emergencial simplificada (1.2.0-emergency)
    **Porta:** 3002
    **Seguran√ßa:** Token-based authentication com hash SHA256
    **Usu√°rios v√°lidos:** Configurados em arquivo
  version: "1.2.0-emergency"
  contact:
    name: SPR Team
    email: carlos@royalnegociosagricolas.com.br
  license:
    name: Proprietary
    url: https://www.royalnegociosagricolas.com.br

servers:
  - url: http://localhost:3002
    description: Servidor de desenvolvimento
  - url: http://0.0.0.0:3002
    description: Servidor de produ√ß√£o
  - url: http://161.35.193.215
    description: DigitalOcean (produ√ß√£o)

paths:
  # ===================== INFORMA√á√ïES GERAIS =====================
  /:
    get:
      summary: Informa√ß√µes da API de autentica√ß√£o
      description: |
        Endpoint raiz que retorna informa√ß√µes sobre a API de autentica√ß√£o,
        incluindo vers√£o, status e endpoints dispon√≠veis.
      tags:
        - System
      responses:
        '200':
          description: Informa√ß√µes da API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIInfoResponse'
              example:
                message: "üåæ SPR - Sistema Preditivo Royal (Com Autentica√ß√£o)"
                version: "1.2.0-emergency"
                status: "‚úÖ ONLINE"
                auth_endpoints:
                  - "POST /api/auth/login"
                  - "POST /api/auth/refresh"
                  - "GET /api/auth/me"
                timestamp: "2024-01-01T12:00:00.000Z"

  /health:
    get:
      summary: Health check do servi√ßo de autentica√ß√£o
      description: |
        Verifica se o servi√ßo de autentica√ß√£o est√° funcionando corretamente.
        Inclui informa√ß√£o sobre status de autentica√ß√£o habilitada.
      tags:
        - Health
      responses:
        '200':
          description: Servi√ßo saud√°vel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: "healthy"
                timestamp: "2024-01-01T12:00:00.000Z"
                auth: "enabled"

  /api/status:
    get:
      summary: Status da API de autentica√ß√£o
      description: |
        Status detalhado da API de autentica√ß√£o mostrando
        estado operacional e informa√ß√µes de vers√£o.
      tags:
        - System
      responses:
        '200':
          description: Status da API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIStatusResponse'
              example:
                status: "‚úÖ ONLINE"
                auth: "‚úÖ ENABLED"
                version: "1.2.0-emergency"
                timestamp: "2024-01-01T12:00:00.000Z"

  # ===================== AUTENTICA√á√ÉO =====================
  /api/auth/login:
    post:
      summary: Login de usu√°rio
      description: |
        Autentica um usu√°rio usando email ou username e senha.
        
        **Credenciais v√°lidas:**
        - Email: carlos@royalnegociosagricolas.com.br
        - Username: admin
        - Senha: Adega001*
        
        **Resposta:** Token JWT para autoriza√ß√£o em endpoints protegidos.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              login_with_email:
                summary: Login com email
                value:
                  email: "carlos@royalnegociosagricolas.com.br"
                  password: "Adega001*"
              login_with_username:
                summary: Login com username
                value:
                  username: "admin"
                  password: "Adega001*"
      responses:
        '200':
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              example:
                success: true
                token: "a1b2c3d4e5f6789012345678901234567890abcdef123456789012345678901234"
                user:
                  username: "carlos@royalnegociosagricolas.com.br"
                  email: "carlos@royalnegociosagricolas.com.br"
                  roles: ["admin", "user"]
                expires_at: "2024-01-01T12:00:00.000Z"
        '400':
          description: Dados obrigat√≥rios n√£o fornecidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Email/username and password required"
        '401':
          description: Credenciais inv√°lidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Invalid credentials"

  /api/auth/refresh:
    post:
      summary: Renovar token de autentica√ß√£o
      description: |
        **N√£o implementado na vers√£o emergencial.**
        
        Este endpoint est√° planejado para vers√µes futuras e permitir√°
        a renova√ß√£o de tokens JWT expirados sem necessidade de novo login.
      tags:
        - Authentication
      responses:
        '200':
          description: Informa√ß√£o sobre funcionalidade n√£o implementada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotImplementedResponse'
              example:
                success: true
                message: "Token refresh n√£o implementado na vers√£o emergencial"

  /api/auth/me:
    get:
      summary: Obter dados do usu√°rio atual
      description: |
        **N√£o implementado na vers√£o emergencial.**
        
        Este endpoint est√° planejado para vers√µes futuras e retornar√°
        informa√ß√µes detalhadas sobre o usu√°rio autenticado.
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Informa√ß√£o sobre funcionalidade n√£o implementada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotImplementedResponse'
              example:
                success: true
                message: "User info n√£o implementado na vers√£o emergencial"

  # ===================== ENDPOINTS PROTEGIDOS =====================
  /api/protected/test:
    get:
      summary: Endpoint de teste protegido
      description: |
        Endpoint de demonstra√ß√£o para testar autentica√ß√£o.
        
        **Vers√£o emergencial:** N√£o realiza valida√ß√£o real de token,
        apenas retorna mensagem de sucesso para testes.
      tags:
        - Protected
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Acesso autorizado (vers√£o emergencial)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProtectedResponse'
              example:
                message: "üîí Acesso liberado (vers√£o emergencial)"
                timestamp: "2024-01-01T12:00:00.000Z"

components:
  schemas:
    # ===================== REQUEST SCHEMAS =====================
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email do usu√°rio (alternativa ao username)
          example: "carlos@royalnegociosagricolas.com.br"
        username:
          type: string
          description: Username do usu√°rio (alternativa ao email)
          example: "admin"
        password:
          type: string
          description: Senha do usu√°rio
          example: "Adega001*"
      required:
        - password
      anyOf:
        - required: [email]
        - required: [username]
      additionalProperties: false

    # ===================== RESPONSE SCHEMAS =====================
    APIInfoResponse:
      type: object
      properties:
        message:
          type: string
          example: "üåæ SPR - Sistema Preditivo Royal (Com Autentica√ß√£o)"
        version:
          type: string
          example: "1.2.0-emergency"
        status:
          type: string
          example: "‚úÖ ONLINE"
        auth_endpoints:
          type: array
          items:
            type: string
          example:
            - "POST /api/auth/login"
            - "POST /api/auth/refresh"
            - "GET /api/auth/me"
        timestamp:
          type: string
          format: date-time
      required:
        - message
        - version
        - status
        - timestamp

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          example: "healthy"
        timestamp:
          type: string
          format: date-time
        auth:
          type: string
          enum: [enabled, disabled]
          example: "enabled"
      required:
        - status
        - timestamp
        - auth

    APIStatusResponse:
      type: object
      properties:
        status:
          type: string
          example: "‚úÖ ONLINE"
        auth:
          type: string
          example: "‚úÖ ENABLED"
        version:
          type: string
          example: "1.2.0-emergency"
        timestamp:
          type: string
          format: date-time
      required:
        - status
        - auth
        - version
        - timestamp

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        token:
          type: string
          description: |
            Token de autentica√ß√£o gerado usando SHA256.
            Formato: hash(identifier:timestamp:secret)
          example: "a1b2c3d4e5f6789012345678901234567890abcdef123456789012345678901234"
        user:
          type: object
          properties:
            username:
              type: string
              description: Identificador do usu√°rio
            email:
              type: string
              format: email
              description: Email do usu√°rio
            roles:
              type: array
              items:
                type: string
                enum: [admin, user]
              description: Roles do usu√°rio
              example: ["admin", "user"]
          required:
            - username
            - email
            - roles
        expires_at:
          type: string
          format: date-time
          description: Data de expira√ß√£o do token (informativa)
      required:
        - success
        - token
        - user
        - expires_at

    NotImplementedResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          description: Mensagem informando sobre funcionalidade n√£o implementada
          example: "Token refresh n√£o implementado na vers√£o emergencial"
      required:
        - success
        - message

    ProtectedResponse:
      type: object
      properties:
        message:
          type: string
          example: "üîí Acesso liberado (vers√£o emergencial)"
        timestamp:
          type: string
          format: date-time
        user_info:
          type: object
          description: Informa√ß√µes do usu√°rio (quando dispon√≠vel)
          properties:
            username:
              type: string
            authenticated:
              type: boolean
      required:
        - message
        - timestamp

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Mensagem de erro
          example: "Invalid credentials"
        details:
          type: string
          description: Detalhes adicionais do erro
        timestamp:
          type: string
          format: date-time
      required:
        - error

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: |
        Token de autentica√ß√£o obtido atrav√©s do endpoint de login.
        
        **Formato:** SHA256 hash do formato: `identifier:timestamp:secret`
        
        **Header:** `Authorization: Bearer <token>`
        
        **Nota:** Na vers√£o emergencial, a valida√ß√£o de tokens √© simplificada.

  parameters:
    AuthorizationHeader:
      name: Authorization
      in: header
      required: true
      schema:
        type: string
        pattern: '^Bearer [a-zA-Z0-9]{64}$'
      description: Token de autoriza√ß√£o no formato Bearer
      example: "Bearer a1b2c3d4e5f6789012345678901234567890abcdef123456789012345678901234"

  responses:
    UnauthorizedError:
      description: Token de autoriza√ß√£o necess√°rio ou inv√°lido
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Token de autoriza√ß√£o necess√°rio"
            timestamp: "2024-01-01T12:00:00.000Z"

    ForbiddenError:
      description: Acesso negado - permiss√µes insuficientes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Acesso negado"
            timestamp: "2024-01-01T12:00:00.000Z"

tags:
  - name: System
    description: Informa√ß√µes do sistema e status da API
  - name: Health
    description: Health checks e monitoramento
  - name: Authentication
    description: Endpoints de autentica√ß√£o e gerenciamento de tokens
  - name: Protected
    description: Endpoints que requerem autentica√ß√£o

# ===================== CONFIGURA√á√ÉO DE SEGURAN√áA =====================
security:
  - BearerAuth: []

# ===================== INFORMA√á√ïES ADICIONAIS =====================
x-auth-config:
  version: "emergency"
  token_type: "sha256_hash"
  secret: "emergency-token-2025"
  valid_users:
    - email: "carlos@royalnegociosagricolas.com.br"
      password: "Adega001*"
      roles: ["admin", "user"]
    - username: "admin"
      password: "Adega001*"
      roles: ["admin", "user"]

x-cors-config:
  allowed_origins:
    - "http://localhost:3000"
    - "http://127.0.0.1:3000" 
    - "http://161.35.193.215"
  allow_credentials: true
  allowed_methods: ["*"]
  allowed_headers: ["*"]

x-deployment-notes: |
  Limita√ß√µes da vers√£o emergencial:
  1. Sistema de autentica√ß√£o simplificado
  2. Usu√°rios hardcoded no c√≥digo
  3. Token refresh n√£o implementado
  4. Valida√ß√£o de token simplificada
  5. N√£o h√° persist√™ncia de sess√µes
  
  Melhorias para vers√£o completa:
  1. Integra√ß√£o com banco de dados de usu√°rios
  2. Sistema completo de JWT com refresh tokens
  3. Valida√ß√£o robusta de tokens
  4. Rate limiting por usu√°rio
  5. Logs de auditoria de autentica√ß√£o
  6. Recupera√ß√£o de senha
  7. Gerenciamento de perfis de usu√°rio
  8. Autentica√ß√£o em dois fatores

externalDocs:
  description: FastAPI Security Documentation
  url: https://fastapi.tiangolo.com/tutorial/security/